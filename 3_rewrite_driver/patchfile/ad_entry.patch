--- ad_entry.bak	2019-12-29 14:53:15.418975583 +0900
+++ ad_entry.c	2019-12-29 14:58:25.867884319 +0900
@@ -11,6 +11,7 @@
 #include <asm/io.h>
 #include <asm/segment.h>
 #include <linux/sched.h>
+#include <linux/sched/signal.h>
 #include <linux/module.h>
 #include <linux/version.h>
 #include <linux/vmalloc.h>
@@ -79,6 +80,11 @@
 #define AD_DRIVER_DESC "Analog Input Device Driver"
 #define AD_DRIVER_VERSION	"5.01.38.00" /* ���i�o�[�W����.�b���ԍ� */
 
+inline long interruptible_sleep_on_timeout(wait_queue_head_t * q, long timeout)
+{
+    return wait_event_interruptible_timeout(*q, 0, timeout);
+}
+
 /* values */
 unsigned long gpg_ad_page_size = PAGE_SIZE;
 unsigned long gpg_ad_page_shift = PAGE_SHIFT;
@@ -545,7 +551,7 @@
 	/* Try to fault in all of the necessary pages */
 	down_read(&current->mm->mmap_sem);
 	
-	ret = get_user_pages(
+	/*ret = get_user_pages(
 		current, 
 		current->mm, 
 		(Buffer & PAGE_MASK),
@@ -553,7 +559,9 @@
 		Direction, 
 		1,
 		(struct page **)mdl->PageList, 
-		NULL);
+		NULL);*/
+	ret = get_user_pages((Buffer & PAGE_MASK), mdl->NumberOfPages,
+			FOLL_FORCE | FOLL_WRITE, (struct page **)mdl->PageList, NULL);
 	up_read(&current->mm->mmap_sem);
 	
 	/* Errors and no page mapped should return here */
@@ -561,7 +569,8 @@
 		/* failed to lock pages */
 		if (ret > 0) {
 			for (i = 0; i < ret; i++) {
-				page_cache_release((struct page *)mdl->PageList[i]);
+				//page_cache_release((struct page *)mdl->PageList[i]);
+		                put_page((struct page *)mdl->PageList[i]);
 			}
 			kfree(mdl->PageList);
 			mdl->PageList = NULL;
@@ -588,7 +597,8 @@
 			if (!PageReserved((struct page *)mdl->PageList[i])) {
 				SetPageDirty((struct page *)mdl->PageList[i]);
 			}
-			page_cache_release((struct page *)mdl->PageList[i]);
+			//page_cache_release((struct page *)mdl->PageList[i]);
+	                put_page((struct page *)mdl->PageList[i]);
 		}
 		kfree(mdl->PageList);
 		mdl->PageList = NULL;
@@ -741,7 +751,8 @@
 	
 	pExt = (PAD_EXTERNAL_STRUCT)ext;
 	
-	init_timer(&(pExt->ad_timer));
+	//init_timer(&(pExt->ad_timer));
+	timer_setup(&(pExt->ad_timer),NULL,0);
 }
 
 /************************************************/
@@ -754,7 +765,7 @@
 	pExt = (PAD_EXTERNAL_STRUCT)ext;
 	
 	pExt->ad_timer.function = function;
-	pExt->ad_timer.data = data;
+	//pExt->ad_timer.data = data;
 	pExt->ad_timer.expires = expires;
 	
 	add_timer(&(pExt->ad_timer));
@@ -1062,7 +1073,8 @@
 /************************************************/
 int gpg_ad_MINOR_f(void *file)
 {
-	return(MINOR(((struct file *)file)->f_dentry->d_inode->i_rdev));
+	//return(MINOR(((struct file *)file)->f_dentry->d_inode->i_rdev));
+	return(MINOR(((struct file *)file)->f_path.dentry->d_inode->i_rdev));
 }
 
 /************************************************/
@@ -1750,3 +1762,5 @@
 	}
 }
 
+MODULE_LICENSE("GPL");
+

